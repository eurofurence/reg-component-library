---
env:
  browser: true
  es2021: true
  jest: true
extends:
  - eslint:recommended
  - plugin:@typescript-eslint/eslint-recommended
  - plugin:@typescript-eslint/recommended-requiring-type-checking
  - plugin:import/errors
  - plugin:import/warnings
  - plugin:import/typescript
  - plugin:promise/recommended
  - plugin:react/recommended
parser: '@typescript-eslint/parser'
parserOptions:
  sourceType: module
  ecmaFeatures:
    impliedStrict: true
    jsx: true
  tsconfigRootDir: '.'
  project: ['./tsconfig.json']
settings:
  react:
    version: '17'
rules:
  no-async-promise-executor: error
  no-await-in-loop: warn
  no-extra-parens: error
  no-misleading-character-class: error
  no-prototype-builtins: error
  no-sparse-arrays: warn
  no-template-curly-in-string: warn
  require-atomic-updates: warn
  accessor-pairs: off
  array-callback-return: warn
  block-scoped-var: error
  class-methods-use-this: error
  complexity: [warn, { max: 10 }]
  # consistent-return: error # Not necessary due to typescript
  curly: [error, all]
  # default-case: warn # Not necessary due to typescript
  dot-location: [error, property]
  dot-notation: error
  eqeqeq: [error, smart]
  guard-for-in: warn
  max-classes-per-file: off
  no-alert: error
  no-caller: error
  no-div-regex: off
  no-else-return: off
  no-empty-function: off
  no-eq-null: off
  no-eval: error
  no-extend-native: error
  no-extra-bind: error
  no-extra-label: error
  no-fallthrough: warn # Revise
  no-floating-decimal: error
  no-implicit-coercion: error
  no-implicit-globals: error
  no-implied-eval: error
  no-invalid-this: warn
  no-iterator: error
  no-labels: error # Revise
  no-lone-blocks: error
  no-loop-func: warn
  no-magic-numbers: [warn, { ignore: [2, 1, 0, -1, 100, 200, 300, 400, 500, 600, 700, 800, 900], enforceConst: true }]
  no-multi-spaces: error
  no-multi-str: off
  no-new: warn
  no-new-func: error
  no-new-wrappers: error
  no-octal-escape: error
  no-param-reassign: [error, { props: true }] # Promote pure code
  no-proto: error
  no-restricted-properties: off
  no-return-assign: warn
  no-return-await: error
  no-script-url: error
  no-self-compare: error
  no-sequences: error
  no-throw-literal: error
  no-unmodified-loop-condition: warn
  no-unused-expressions: error
  no-unused-vars: error
  no-useless-call: error
  no-useless-catch: error
  no-useless-concat: error
  no-useless-return: error
  no-void: error
  no-warning-comments: warn
  no-with: error
  prefer-named-capture-group: error
  prefer-promise-reject-errors: error
  radix: error
  require-await: warn
  require-unicode-regexp: error
  vars-on-top: off
  wrap-iife: warn
  yoda: error
  strict: [error, never]
  init-declarations: off
  no-label-var: error
  no-restricted-globals: off
  no-shadow: warn
  no-shadow-restricted-names: error
  no-undef-init: error
  no-undefined: off
  # no-use-before-define: error # Disable for https://github.com/typescript-eslint/typescript-eslint/issues/2540
  callback-return: error
  global-require: error
  handle-callback-err: warn
  no-buffer-constructor: error
  no-mixed-requires: error
  no-new-require: error
  no-path-concat: error
  no-process-env: error
  no-process-exit: error
  no-restricted-modules: off
  no-sync: warn
  array-bracket-newline: [error, consistent]
  array-bracket-spacing: [error, never]
  array-element-newline: [error, consistent]
  block-spacing: [error, always]
  brace-style: [error, 1tbs]
  camelcase: error
  capitalized-comments: off
  comma-dangle: [error, always-multiline]
  comma-spacing: [error, { before: false, after: true }]
  comma-style: [error, last]
  computed-property-spacing: [error, never]
  consistent-this: [error, that]
  eol-last: [error, always]
  func-call-spacing: [error, never]
  func-name-matching: [error, always]
  func-names: off
  func-style: [error, expression]
  function-paren-newline: off # Turned off because it has issues with arrow functions
  id-blacklist: off
  id-length: off
  id-match: off
  implicit-arrow-linebreak: off
  indent: [error, tab, { SwitchCase: 1 }]
  jsx-quotes: [error, prefer-double]
  key-spacing: [error, { beforeColon: false, afterColon: true, mode: strict}]
  keyword-spacing: [error, { before: true, after: true }]
  line-comment-position: off
  linebreak-style: [error, unix]
  lines-around-comment: [error, { beforeBlockComment: true, allowBlockStart: true, allowObjectStart: true, allowArrayStart: true, allowClassStart: true }]
  lines-between-class-members: [error, always]
  max-depth: [warn, 4]
  max-len: [warn, { code: 200 }]
  max-lines: [warn, 600]
  max-lines-per-function: off
  max-nested-callbacks: off
  max-params: [warn, 8]
  max-statements: [warn, { max: 10 }]
  max-statements-per-line: [error, { max: 1 }]
  multiline-comment-style: off
  multiline-ternary: [error, always-multiline]
  new-cap: off
  new-parens: error
  newline-per-chained-call: [error, { ignoreChainWithDepth: 3 }]
  no-array-constructor: error
  no-bitwise: error
  no-continue: off
  no-inline-comments: off
  no-lonely-if: error
  no-mixed-operators: off
  no-mixed-spaces-and-tabs: [error, smart-tabs]
  no-multi-assign: error
  no-multiple-empty-lines: error
  no-negated-condition: off
  no-nested-ternary: off
  no-new-object: error
  no-plusplus: off
  no-restricted-syntax: off
  no-tabs: off
  no-ternary: off
  no-trailing-spaces: error
  no-underscore-dangle: error
  no-unneeded-ternary: error
  no-whitespace-before-property: error
  nonblock-statement-body-position: off
  object-curly-newline: [error, { consistent: true }]
  object-curly-spacing: [error, always]
  object-property-newline: [error, { allowAllPropertiesOnSameLine: true }]
  one-var: [error, never] # { initialized: never }
  one-var-declaration-per-line: off
  operator-assignment: [error, always]
  operator-linebreak: [error, before, { overrides: { '=': after } }]
  padded-blocks: [error, never]
  padding-line-between-statements:
    - error
    - { blankLine: always, prev: [cjs-import, import], next: '*' }
    - { blankLine: always, prev: '*', next: [cjs-import, import] }
    - { blankLine: any, prev: [cjs-import, import], next: [cjs-import, import] }
    - { blankLine: always, prev: [const, let, var], next: '*' }
    - { blankLine: always, prev: '*', next: [const, let, var] }
    - { blankLine: any, prev: [const, let, var], next: [const, let, var] }
    - { blankLine: always, prev: '*', next: return }
    - { blankLine: always, prev: return, next: '*' }
    - { blankLine: always, prev: '*', next: 'block-like' }
    - { blankLine: always, prev: 'block-like', next: '*' }
  prefer-object-spread: error
  quote-props: off # [error, consistent-as-needed]
  quotes: [error, single, { avoidEscape: true, allowTemplateLiterals: true }]
  semi: [error, never]
  semi-spacing: [error, { before: false, after: true }]
  semi-style: [error, last]
  sort-keys: off
  sort-vars: off
  space-before-blocks: [error, always]
  space-before-function-paren: [error, { anonymous: always, named: never, asyncArrow: always }]
  space-in-parens: [error, never]
  space-infix-ops: error
  space-unary-ops: [error, { words: true, nonwords: false }]
  spaced-comment: off # TODO: Not when writing ts directive [error, always]
  switch-colon-spacing: [error, { before: false, after: true }]
  template-tag-spacing: [error, never]
  unicode-bom: [error, never]
  wrap-regex: off
  arrow-body-style: off
  arrow-parens: off
  arrow-spacing: [error, { before: true, after: true }]
  generator-star-spacing: [error, { before: false, after: true }]
  no-confusing-arrow: off
  no-duplicate-imports: error
  no-restricted-imports: off
  no-useless-computed-key: error
  no-useless-constructor: error
  no-useless-rename: error
  no-var: error
  object-shorthand: warn
  prefer-arrow-callback: error
  prefer-const: error
  prefer-destructuring: off
  prefer-numeric-literals: error
  prefer-rest-params: error
  prefer-spread: error
  prefer-template: error
  rest-spread-spacing: [error, never]
  sort-imports: off
  symbol-description: off
  template-curly-spacing: [error, never]
  yield-star-spacing: [error, { before: false, after: true }]

  react/prop-types: off
  react/react-in-jsx-scope: off
  react/jsx-uses-react: off
  react/display-name: off
